// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário para autenticação
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("OPERATOR") // ADMIN, MANAGER, OPERATOR
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  sales     Sale[]
  
  @@map("users")
}

// Modelo de Categoria de Produtos
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  products    Product[]
  
  @@map("categories")
}

// Modelo de Produto
model Product {
  id          String      @id @default(cuid())
  name        String
  barcode     String?     @unique
  salePrice   Float
  costPrice   Float?
  stock       Int         @default(0)
  unit        String      @default("UN") // UN, KG, L, M, M2, M3
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relacionamentos
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  saleItems   SaleItem[]
  
  @@map("products")
}



// Modelo de Venda
model Sale {
  id            String      @id @default(cuid())
  total         Float
  discount      Float       @default(0)
  finalTotal    Float
  paymentMethod String
  status        String      @default("PENDING") // PENDING, PAID, CANCELLED, REFUNDED
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relacionamentos
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         SaleItem[]
  payment       Payment?
  
  @@map("sales")
}



// Modelo de Item de Venda
model SaleItem {
  id        String   @id @default(cuid())
  quantity  Float
  unitPrice Float
  total     Float
  createdAt DateTime @default(now())
  
  // Relacionamentos
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("sale_items")
}

// Modelo de Pagamento
model Payment {
  id              String        @id @default(cuid())
  amount          Float
  method          String
  status          String        @default("PENDING") // PENDING, PROCESSING, PAID, FAILED, EXPIRED, CANCELLED
  transactionId   String?       @unique
  pixQrCode       String?
  pixKey          String?
  expiresAt       DateTime?
  paidAt          DateTime?
  webhookData     String?       // JSON com dados do webhook
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relacionamentos
  saleId          String        @unique
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}



// Modelo de Configuração do Sistema
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_configs")
}